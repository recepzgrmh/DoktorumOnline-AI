import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

/// Mesaj verisini temsil eden model sınıfı
class ChatMessage {
  final String id;
  final String title;
  final String subtitle;
  final DateTime time;
  final String avatarPath;

  ChatMessage({
    required this.id,
    required this.title,
    required this.subtitle,
    required this.time,
    required this.avatarPath,
  });

  /// DocumentSnapshot’ı model objesine döndürür
  factory ChatMessage.fromDocument(DocumentSnapshot<Map<String, dynamic>> doc) {
    final data = doc.data()!;
    return ChatMessage(
      id: doc.id,
      title: data['title'] as String? ?? 'Başlık yok',
      subtitle: data['subtitle'] as String? ?? '',
      // time alanını Timestamp’ten DateTime’e çeviriyoruz
      time: (data['time'] as Timestamp).toDate(),
      avatarPath: data['avatarPath'] as String? ?? 'assets/images/avatar.png',
    );
  }
}

class OldChatScreen extends StatefulWidget {
  final String userId;
  final String complaintId;
  const OldChatScreen({
    super.key,
    required this.userId,
    required this.complaintId,
  });

  @override
  State<OldChatScreen> createState() => _OldChatScreenState();
}

class _OldChatScreenState extends State<OldChatScreen> {
  CollectionReference<Map<String, dynamic>> get messagesRef => FirebaseFirestore
      .instance
      .collection('users')
      .doc(widget.userId)
      .collection('complaints')
      .doc(widget.complaintId)
      .collection('messages');

  /// Firestore’dan mesajları akış (stream) olarak alır
  Stream<List<ChatMessage>> getMessagesStream() {
    return FirebaseFirestore.instance
        .collection('users')
        .doc(widget.userId)
        .collection('complaints')
        .doc(widget.complaintId)
        .collection('messages')
        .orderBy('time', descending: true)
        .snapshots()
        .map(
          (snapshot) =>
              snapshot.docs
                  .map((doc) => ChatMessage.fromDocument(doc))
                  .toList(),
        );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'Chat History',
          style: TextStyle(fontWeight: FontWeight.w500, fontSize: 24),
        ),
        centerTitle: true,
        backgroundColor: Colors.teal,
        foregroundColor: Colors.white,
      ),
      body: StreamBuilder<List<ChatMessage>>(
        stream: getMessagesStream(),
        builder: (context, snapshot) {
          // 1) Hata durumu
          if (snapshot.hasError) {
            return Center(child: Text('Hata oluştu: ${snapshot.error}'));
          }
          // 2) Veri yüklenirken
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }
          // 3) Veri geldi ama boşsa
          final messages = snapshot.data;
          if (messages == null || messages.isEmpty) {
            return const Center(child: Text('Herhangi bir Sohbet Bulunamadı'));
          }
          // 4) Mesajları listele
          return ListView.separated(
            padding: const EdgeInsets.all(8),
            separatorBuilder: (_, __) => const SizedBox(height: 6),
            itemCount: messages.length,
            itemBuilder: (context, i) {
              final msg = messages[i];
              return Card(
                elevation: 4,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
                child: ListTile(
                  leading: CircleAvatar(
                    radius: 24,
                    backgroundImage: AssetImage(msg.avatarPath),
                  ),
                  title: Text(
                    msg.title,
                    style: const TextStyle(fontWeight: FontWeight.bold),
                  ),
                  subtitle: Text(
                    msg.subtitle,
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                  ),
                  trailing: Text(
                    // Zamanı "Saat:Dakika  Gün.Ay.Yıl" formatında göster
                    DateFormat('HH:mm  dd.MM.yyyy').format(msg.time),
                    style: const TextStyle(fontSize: 12, color: Colors.grey),
                  ),
                  onTap: () {
                    // Örneğin detay sayfasına geçiş kodu buraya
                  },
                ),
              );
            },
          );
        },
      ),
    );
  }
}
